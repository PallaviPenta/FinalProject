import pandas as pd
import numpy as np
from sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier, HistGradientBoostingClassifier, VotingClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
import os

# Load dataset
dataset_path = os.path.join(os.path.dirname(__file__), "..", "drebin215dataset5560malware9476benign1.xlsx")
df = pd.read_excel(dataset_path)

# Preprocess dataset
df = df.dropna()
df['CLASS'] = df['CLASS'].apply(lambda x: 1 if x == 'S' else 0)

# Separate features and target
y = df['CLASS'].values
X = df.drop('CLASS', axis=1).values

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42, stratify=y)

# Define classifiers
rf = RandomForestClassifier(n_estimators=100, random_state=42)
gb = GradientBoostingClassifier(n_estimators=100, random_state=42)
hgb = HistGradientBoostingClassifier(random_state=42)

# Voting classifier
voting_model = VotingClassifier(
    estimators=[('rf', rf), ('gb', gb), ('hgb', hgb)],
    voting='soft'
)

# Train model
voting_model.fit(X_train, y_train)

# Prediction function
def predict_malware(features):
    """Takes a list of binary feature inputs (0 or 1) and predicts if it's Malware or Benign."""
    
    # Ensure input is a NumPy array for prediction
    features_array = np.array(features).reshape(1, -1)
    
    prediction = voting_model.predict(features_array)[0]
    return "Malware" if prediction == 1 else "Benign"
